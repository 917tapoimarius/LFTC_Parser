@startuml
class Main {
    +printGrammarMenu(): void
    +main(args: String[]): void
}

class Grammar {
  -nonTerminals: List<String>
  -terminals: List<String>
  -startSymbol: String
  -productions: Map<String, List<List<String>>>
  +Grammar()
  +readFile(filename: String): void
  +checkCFG(): boolean
  +printNonTerminals(): void
  +printTerminals(): void
  +printProductions(): void
  +printStartSymbol(): void
  +printProductionsForNonterminal(): void
  +getStartSymbol(): String
  +getNonTerminals(): List<String>
  +getTerminals(): List<String>
  +getProductions(): Map<String, List<List<String>>>
  +getProductionForNonterminal(nonterminal: String): String
  +getNextProduction(production: String, nonTerminal: String): String
}

class RecursiveDescendentParser {
    - grammar: Grammar
    - working: List<List<String>>
    - input: List<String>
    - state: String
    - sequence: List<String>
    - index: int
    - depth: int
    - leftRecursive: boolean
    + RecursiveDescendentParser(grammar: Grammar)
    + checkGrammarLeftRecursive(): boolean
    + momentaryInsuccess(): void
    + success(): void
    + advance(): void
    + expand(): void
    + back(): void
    + anotherTry(): void
    + checkSequence(sequence: List<String>): boolean
    - getModel(): void
}

Main *-- Grammar
Grammar *-- RecursiveDescendentParser
@enduml